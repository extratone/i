/*
 * Copyright (C) 2008, 2011 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

enum XMLHttpRequestResponseType {
    "",
    "arraybuffer",
    "blob",
    "document",
//    FIXME: enable once support for json responseText is completed. (bug #73648)
//    "json",
    "text"
};

[
    GlobalContext=WindowAndWorker,
    ActiveDOMObject,
    Constructor,
    ConstructorCallWith=ScriptExecutionContext,
    JSCustomMarkFunction,
    EventTarget,
    JSNoStaticTables
] interface XMLHttpRequest {
    // From XMLHttpRequestEventTarget
    // event handler attributes
    attribute EventListener onabort;
    attribute EventListener onerror;
    attribute EventListener onload;
    attribute EventListener onloadend;
    attribute EventListener onloadstart;
    attribute EventListener onprogress;
    [Conditional=XHR_TIMEOUT] attribute EventListener ontimeout;

    // event handler attributes
    attribute EventListener onreadystatechange;

    // state
    const unsigned short UNSENT = 0;
    const unsigned short OPENED = 1;
    const unsigned short HEADERS_RECEIVED = 2;
    const unsigned short LOADING = 3;
    const unsigned short DONE = 4;

    [Conditional=XHR_TIMEOUT, SetterRaisesException] attribute unsigned long timeout;
    readonly attribute unsigned short readyState;

    [SetterRaisesException] attribute boolean withCredentials;

    [Custom, RaisesException] void open(DOMString method, DOMString url, optional boolean async, optional DOMString user, optional DOMString password);

    [RaisesException] void setRequestHeader(DOMString header, DOMString value);

    [Custom, RaisesException] void send();

    void abort();

    readonly attribute XMLHttpRequestUpload upload;

    // response
    [TreatReturnedNullStringAs=Undefined, RaisesException] DOMString getAllResponseHeaders();
    [TreatReturnedNullStringAs=Null, RaisesException] DOMString getResponseHeader(DOMString header);
    [GetterRaisesException, CustomGetter] readonly attribute DOMString responseText; // The custom getter implements TreatReturnedNullStringAs=Null
    [GetterRaisesException] readonly attribute Document responseXML;

    [SetterRaisesException] attribute XMLHttpRequestResponseType responseType;
    [GetterRaisesException, CustomGetter] readonly attribute Object response;

    [GetterRaisesException] readonly attribute unsigned short status;
    [GetterRaisesException] readonly attribute DOMString statusText;

    // Extension
    void overrideMimeType(DOMString override);

    // EventTarget interface
    void addEventListener(DOMString type, 
                          EventListener listener, 
                          optional boolean useCapture);
    void removeEventListener(DOMString type, 
                             EventListener listener, 
                             optional boolean useCapture);
    [RaisesException] boolean dispatchEvent(Event evt);
};
