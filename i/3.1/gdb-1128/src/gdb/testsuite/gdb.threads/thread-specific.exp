# Copyright 2004 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@prep.ai.mit.edu

# This file was written by Daniel Jacobowitz <drow@mvista.com>.
# It tests that the correct breakpoint is reported when we hit a
# thread-specific breakpoint inserted for several threads.

if $tracelevel then {
	strace $tracelevel
}

set prms_id 0
set bug_id 0

set testfile "thread-specific"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}

if {[gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable [list debug "incdir=${objdir}"]] != "" } {
    return -1
}

# Return a list of the valid thread IDs, with the initial thread first.
proc get_thread_list { } {
  global gdb_prompt
  global expect_out

  set thr_list ""

  gdb_test_multiple "info threads" "get threads list" {
    -re "info threads\r\n" {
      exp_continue
    }
    -re "^\\*  *(\[0-9\]*) (Thread|process) \[^\n\]*main\[^\n\]*\n" {
      set thr_list "$expect_out(1,string) $thr_list"
      exp_continue
    }
    -re "^  *(\[0-9\]*) (Thread|process) \[^\n\]*\n" {
      lappend thr_list $expect_out(1,string)
      exp_continue
    }
    -re ".*$gdb_prompt $" {
      if { [llength $thr_list] != 0 } {
	pass "get threads list"
      } else {
	fail "get threads list (no threads)"
      }
    }
  }

  return $thr_list
}

# Start with a fresh gdb.

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir

gdb_load ${binfile}

gdb_test "set print sevenbit-strings" ""
gdb_test "set width 0" ""

runto_main

gdb_breakpoint [gdb_get_line_number "thread-specific.exp: last thread start"]
gdb_continue_to_breakpoint "all threads started"

set line [gdb_get_line_number "thread-specific.exp: thread loop"]
set threads [get_thread_list]

if {[llength $threads] == 0} {
  # We have already issued a FAIL above.
  return 1
}

gdb_test_multiple "break $line thread [lindex $threads 0]" \
  "breakpoint $line main thread" {
    -re "Breakpoint (\[0-9\]*) at.* file .*$srcfile, line.*$gdb_prompt $" {
      set main_breakpoint $expect_out(1,string)
      pass "breakpoint $line main thread"
    }
}

foreach thread [lrange $threads 1 end] {
  gdb_breakpoint "$line thread $thread"
}

gdb_test_multiple "continue" "continue to thread-specific breakpoint" {
	-re "Breakpoint $main_breakpoint, .* at .*\r\n$gdb_prompt $" {
	    fail "continue to thread-specific breakpoint (wrong breakpoint)"
	}
	-re "Breakpoint .* at .*\r\n$gdb_prompt $" {
	    pass "continue to thread-specific breakpoint"
	}
}

return 0
