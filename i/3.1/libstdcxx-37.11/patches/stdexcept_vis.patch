# rdar://problem/4213177 out_of_range not caught

--- gcc-4.0.0/libstdc++-v3/ChangeLog  2005-04-21 01:20:38.000000000 -0400
+++ libstdc++-v3/ChangeLog      2005-12-19 15:37:49.000000000 -0500
@@ -1,3 +1,7 @@
+2005-12-12  Howard Hinnant  <hhinnant@apple.com>
+
+       * include/std/std_stdexcept.h: Added default visibility pragmas.
+
 2005-04-20  Release Manager
 
        * GCC 4.0.0 released.

--- gcc-4.0.0/libstdc++-v3/include/std/std_stdexcept.h	2004-11-23 23:11:21.000000000 -0500
+++ libstdc++-v3/include/std/std_stdexcept.h	2005-12-12 14:52:30.000000000 -0500
@@ -43,6 +43,8 @@
 #include <exception>
 #include <string>
 
+#pragma GCC visibility push(default)
+
 namespace std 
 {
   /** Logic errors represent problems in the internal logic of a program;
@@ -144,4 +146,6 @@ namespace std 
   };
 } // namespace std
 
+#pragma GCC visibility pop
+
 #endif /* _GLIBCXX_STDEXCEPT */

--- /dev/null	2005-12-14 13:56:14.000000000 -0500
+++ libstdc++-v3/testsuite/23_containers/vector/element_access/2.cc	2005-12-12 18:10:59.000000000 -0500
@@ -0,0 +1,69 @@
+// 2005-12-12
+// Howard Hinnant
+
+// Copyright (C) 2000, 2003, 2004, 2005 Free Software Foundation, Inc.
+//
+// This file is part of the GNU ISO C++ Library.  This library is free
+// software; you can redistribute it and/or modify it under the
+// terms of the GNU General Public License as published by the
+// Free Software Foundation; either version 2, or (at your option)
+// any later version.
+
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License along
+// with this library; see the file COPYING.  If not, write to the Free
+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
+// USA.
+
+// 23.2.4 vector 
+
+// { dg-options "-fvisibility=hidden" }
+
+#include <vector>
+#include <stdexcept>
+#include <testsuite_hooks.h>
+
+template<typename T>
+struct A { };
+
+struct B { };
+
+// http://gcc.gnu.org/ml/libstdc++/2000-09/msg00002.html
+bool test01()
+{
+  bool test __attribute__((unused)) = true;
+  std::vector< A<B> > vec01;
+  std::vector< A<B> > vec02(5);
+  typedef std::vector< A<B> >::size_type size_type;
+  typedef std::vector< A<B> >::reference reference;
+
+  try
+    { 
+      reference r01 __attribute__((unused)) = vec01.at(6); 
+      VERIFY( false ); // Should not get here, as exception thrown.
+    }
+  catch(std::out_of_range& err)
+    {
+      VERIFY( true );
+    }
+  catch(...)
+    {
+      VERIFY( false );
+    }
+  return test;
+}
+
+#if !__GXX_WEAK__ && _MT_ALLOCATOR_H
+// Explicitly instantiate for systems with no COMDAT or weak support.
+template class __gnu_cxx::__mt_alloc<A<B> >;
+#endif
+
+int main()
+{
+  test01();
+  return 0;
+}
