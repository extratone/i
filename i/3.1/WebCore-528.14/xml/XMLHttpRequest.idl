/*
 * Copyright (C) 2008 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

module xml {

    interface [
        CustomMarkFunction
    ] XMLHttpRequest {
        // From XMLHttpRequestEventTarget
        // event handler attributes
        attribute EventListener onabort;
        attribute EventListener onerror;
        attribute EventListener onload;
        attribute EventListener onloadstart;
        attribute EventListener onprogress;

        // event handler attributes
        attribute EventListener onreadystatechange;

        // state
        const unsigned short UNSENT = 0;
        const unsigned short OPENED = 1;
        const unsigned short HEADERS_RECEIVED = 2;
        const unsigned short LOADING = 3;
        const unsigned short DONE = 4;

        readonly attribute unsigned short readyState;

        // request
        // void open(in DOMString method, in DOMString url);
        // void open(in DOMString method, in DOMString url, in boolean async);
        // void open(in DOMString method, in DOMString url, in boolean async, in DOMString user);
        [Custom] void open(in DOMString method, in DOMString url, in boolean async, in DOMString user, in DOMString password)
            raises(DOMException);

        [Custom] void setRequestHeader(in DOMString header, in DOMString value)
            raises(DOMException);

        // void send();
        // void send(in DOMString data);
        [Custom] void send(in Document data)
            raises(DOMException);

        void abort();

        readonly attribute XMLHttpRequestUpload upload;

        // response
        [ConvertNullStringTo=Undefined] DOMString getAllResponseHeaders()
            raises(DOMException);
        [Custom, ConvertNullStringTo=Null] DOMString getResponseHeader(in DOMString header)
            raises(DOMException);
        readonly attribute [CustomGetter] DOMString responseText; // The custom getter implements ConvertNullStringTo=Null
        readonly attribute Document responseXML;
        readonly attribute unsigned short status
            getter raises(DOMException);
        readonly attribute DOMString statusText
            getter raises(DOMException);

        // Extension
        [Custom] void overrideMimeType(in DOMString override);

        // EventTarget interface
        [Custom] void addEventListener(in DOMString type, 
                                      in EventListener listener, 
                                      in boolean useCapture);
        [Custom] void removeEventListener(in DOMString type, 
                                          in EventListener listener, 
                                          in boolean useCapture);
        boolean dispatchEvent(in Event evt)
            raises(EventException);
    };

}
